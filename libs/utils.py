from matplotlib import pyplot as plt
from numpy import linspace, sin, array, append, pi

def arbitrary_1d_lookup(table_x, table_y, x):
    """
    Perform arbitrary 1D lookup from one table to another with linear interpolation between values.

    Parameters:
        table_x (list): The 1D table of x-coordinates.
        table_y (list): The 1D table of y-coordinates.
        x (float): The x-coordinate to lookup in table_x.

    Returns:
        float: The interpolated value at the specified x-coordinate in table_y.
    """

    def linear_interpolation(y1, y2, x1, x2, x):
        """
        Perform linear interpolation between two points.
        """
        return y1 + (y2 - y1) * (x - x1) / (x2 - x1)

    if not table_x or not table_y:
        return None

    # Ensure x is within bounds
    x_min, x_max = min(table_x), max(table_x)
    if x < x_min:
        x = x_min
    elif x > x_max:
        x = x_max

    # Find the interval in table_x that x falls into
    i = 0
    while i < len(table_x) - 1 and x >= table_x[i + 1]:
        i += 1

    # Perform linear interpolation
    if i == len(table_x) - 1:
        return table_y[-1]
    else:
        return linear_interpolation(table_y[i], table_y[i + 1], table_x[i], table_x[i + 1], x)


# Example usage:
table_x = [0.0, 0.25007077522574755, 0.4071504079052372, 0.5390972993560085, 0.6578495016617026, 0.7684335630680634, 0.8727344391672445, 0.9726370855513999, 1.0693981392819656, 1.1636459188896593, 1.2560087429051994, 1.3471149298593033, 1.4369644797519714, 1.5261857111139214, 1.6154069424758717, 1.7046281738378217, 1.7944777237304899, 1.8855839106845937, 1.9779467347001338, 2.0721945143078275, 2.168955568038393, 2.2688582144225484, 2.37315909052173, 2.4837431519280906, 2.6024953542337848, 2.734442245684556, 2.8915218783640455, 3.141592653589793, 3.3916634288155407, 3.5487430614950304, 3.6806899529458015, 3.7994421552514956, 3.9100262166578563, 4.014327092757037, 4.114229739141193, 4.210990792871758, 4.305238572479452, 4.397601396494992, 4.488707583449096, 4.578557133341764, 4.6677783647037145, 4.756999596065665, 4.846220827427615, 4.9360703773202825, 5.027176564274387, 5.119539388289927, 5.21378716789762, 5.310548221628186, 5.410450868012342, 5.514751744111523, 5.625335805517883, 5.744088007823578, 5.876034899274349, 6.033114531953839, 6.283185307179586]  # Sample 1D table of x-coordinates
table_y = [0.0, 0.24747253363020225, 0.3959942928870099, 0.5133615281026557, 0.6114165585790164, 0.6950098232386142, 0.7660893162928579, 0.8263735866196754, 0.8769113775019604, 0.9182529716809616, 0.9508621674730309, 0.9750874482725091, 0.9910578771559359, 0.9990051114952521, 0.9990051114952521, 0.9910578771559359, 0.9750874482725093, 0.950862167473031, 0.9182529716809616, 0.8769113775019604, 0.8263735866196755, 0.7660893162928581, 0.695009823238614, 0.6114165585790166, 0.5133615281026557, 0.39599429288701005, 0.2474725336302024, 1.2246467991473532e-16, -0.2474725336302022, -0.3959942928870098, -0.5133615281026555, -0.6114165585790163, -0.6950098232386139, -0.7660893162928577, -0.8263735866196751, -0.87691137750196, -0.9182529716809616, -0.9508621674730308, -0.975087448272509, -0.9910578771559359, -0.9990051114952521, -0.9990051114952521, -0.9910578771559359, -0.9750874482725094, -0.9508621674730309, -0.9182529716809618, -0.8769113775019607, -0.8263735866196759, -0.7660893162928579, -0.6950098232386142, -0.611416558579017, -0.5133615281026558, -0.39599429288701016, -0.24747253363020252, -2.4492935982947064e-16]  # Sample 1D table of y-coordinates
x = linspace(0, 2 * pi, 100)  # Sample x-coordinate
y_int = []
y = sin(x)
for x_item in x:
    y_int.append(arbitrary_1d_lookup(table_x, table_y, x_item))

plt.plot(x, y)
plt.plot(x, y_int)

plt.grid()
plt.show()